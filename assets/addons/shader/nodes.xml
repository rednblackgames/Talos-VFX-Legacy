<modules classPath="games.rednblack.talos.editor.addons.shader.nodes">
    <category name="artistic" title="Artistic">
        <module name = "ColorChannelsNode" title = "Color Mixer" keywords = "color">
            <value port="output" name="outputRGBA" type="vec4">RGBA</value>
            <group>
                <dynamicValue port="input" name="R" type="float" max="255" progress="true" step="1">R</dynamicValue>
                <dynamicValue port="input" name="G" type="float" max="255" progress="true" step="1">G</dynamicValue>
                <dynamicValue port="input" name="B" type="float" max="255" progress="true" step="1">B</dynamicValue>
                <dynamicValue port="input" name="A" type="float" max="255" progress="true" step="1">A</dynamicValue>
            </group>
        </module>
        <module name = "ContrastNode" title = "Contrast" class="GenericMethodNode" forcePreview="false">
            <value port="output" name="outputValue" type="vec3">Output</value>
            <value port="input" name="inputValue" type="vec3">Input</value>
            <dynamicValue port="input" name="contrast" type="float" default="1.0" max="3" step="0.001" progress="true">Contrast</dynamicValue>
            <shader-body>
                <![CDATA[
                     float midpoint = pow(0.5, 2.2);
                     return (inputValue - midpoint) * contrast + midpoint;
                ]]>
            </shader-body>
        </module>
        <module name = "saturationNode" title = "Saturation" class="GenericMethodNode" forcePreview="false">
            <value port="output" name="outputValue" type="vec3">Output</value>
            <value port="input" name="inputValue" type="vec3">Input</value>
            <dynamicValue port="input" name="saturation" type="float" default="1.0" max="1" step="0.001" progress="true">Saturation</dynamicValue>
            <shader-body>
                <![CDATA[
                      float luma = dot(vec3(inputValue), vec3(0.2126729, 0.7151522, 0.0721750));
                      return vec3(luma) + vec3(saturation) * (vec3(inputValue) - vec3(luma));
                ]]>
            </shader-body>
        </module>
    </category>
    <category name="input" title="Input">
        <module name = "TimeNode" title = "Timer" keywords = "timer">
            <value port="output" name="outputValue" type="float">System time value</value>
        </module>
        <module name = "NumberNode" title = "Number" keywords = "number,float">
            <dynamicValue port="output" name="outputValue" type="float" min="-1000" max="1000">X: </dynamicValue>
        </module>
        <module name = "Vector2Node" title = "XY to Vector" keywords = "vector2,position">
            <value port="output" name="outputValue" type="vec2">Output</value>
            <group>
                <dynamicValue port="input" name="X" type="float" min="-1000" max="1000">X: </dynamicValue>
                <dynamicValue port="input" name="Y" type="float" min="-1000" max="1000">Y: </dynamicValue>
            </group>
        </module>
        <module name = "Vector3Node" title = "XYZ to Vector" keywords = "vector3,position">
            <value port="output" name="outputValue" type="vec3">Output</value>
            <group>
                <dynamicValue port="input" name="X" type="float" min="-1000" max="1000">X: </dynamicValue>
                <dynamicValue port="input" name="Y" type="float" min="-1000" max="1000">Y: </dynamicValue>
                <dynamicValue port="input" name="Z" type="float" min="-1000" max="1000">Z: </dynamicValue>
            </group>
        </module>
        <module name = "ColorNode" title = "Color" keywords = "color">
            <group>
                <value port="output" name="outputRGBA" type="vec4">RGBA</value>
                <value port="output" name="outputR" type="float">Red Channel</value>
                <value port="output" name="outputG" type="float">Green Channel</value>
                <value port="output" name="outputB" type="float">Blue Channel</value>
                <value port="output" name="outputA" type="float">Alpha (Transparency)</value>
            </group>
            <color port="input" name="color" type="vec4">Input Color</color>
        </module>
        <module name = "SampleTextureNode" title = "Texture Sample" keywords = "texture,sample">
            <group>
                <value port="output" name="outputRGBA" type="vec4">RGBA</value>
                <value port="input" name="overrideUV" type="vec2">UV</value>
                <value port="input" name="offsetUV" type="vec2">UV Offset</value>
                <value port="input" name="mulUV" type="vec2">UV Mul</value>
            </group>
            <checkbox name="wrap">Wrap Coordinates</checkbox>
        </module>
        <module name = "UVNode" title = "UV Node" keywords = "uv,sample,vertex">
            <value port="output" name="outputValue" type="vec2">UV Coordinates</value>
        </module>
        <module name = "VertexColorNode" title = "Vertex Color" keywords = "input">
            <value port="output" name="outputUV" type="vec4">Vertex Color</value>
        </module>
    </category>
    <category name="master" title="Master">
        <module name = "ColorOutput" title = "Pixel Shader" keywords = "main">
            <value port="input" name="inputColor" type="vec4">Input Color</value>
            <value port="output" name="outputShader" type="text">Output Shader</value>
            <select name="blending">
                <option value = "NORMAL">Normal Blending</option>
                <option value = "ADDITIVE">Additive Blending</option>
                <option value = "BLEND-ADD">Blend Add (Alpha)</option>
            </select>
        </module>
        <module name = "ExternalShaderNode" title = "External Shader" keywords = "custom">
            <value port="output" name="outputShader" type="text">Output Shader</value>
        </module>
        <module name = "MaterialEndpoint" title = "Material" keywords = "main">
            <value port="input" name="inputShader" type="text">Pixel Shader</value>
            <select name="preview">
                <option value = "3D">3D Preview</option>
                <option value = "2D">2D Preview</option>
            </select>
        </module>
    </category>
    <category name="math" title="Math">
        <module name = "MixNode" title = "Mix Shader" keywords = "math,mix">
            <value port="output" name="outputValue" type="vec4">Output Value</value>
            <dynamicValue port="input" name="frac" type="vec4" max = "1" step="0.001" progress="true" default="0.5">Frac</dynamicValue>
            <group>
                <value port="input" name="valueA" type="vec4">Value A</value>
                <value port="input" name="valueB" type="vec4">Value B</value>
            </group>
        </module>
        <module name = "RemapNode" title = "Remap" keywords = "math,remap" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec4">Output Value</value>
                <value port="input" name="inputValue" type="vec4">Input Value</value>
            </group>
            <group>
                <dynamicValue port="input" name="inMin" type="float" default="-1" min="-999">Input Min</dynamicValue>
                <dynamicValue port="input" name="inMax" type="float" default="1" min="-999">Input Max</dynamicValue>
                <dynamicValue port="input" name="outMin" type="float" default="0" min="-999">Output Min</dynamicValue>
                <dynamicValue port="input" name="outMax" type="float" default="1" min="-999">Output Max</dynamicValue>
            </group>
            <shader-body>
                <![CDATA[
                    return outMin + (inputValue - inMin) * (outMax - outMin) / (inMax - inMin);
                ]]>
            </shader-body>
        </module>
        <module name = "MathNode" title = "Math Node" keywords = "math,add,multiply">
            <value port="output" name="outputValue" type="fluid">Output Value</value>
            <select name="operation">
                <option value = "ADD">Add</option>
                <option value = "SUB">Subtract</option>
                <option value = "MUL">Multiply</option>
                <option value = "DIV">Divide</option>
                <option value = "POW">Power</option>
                <option value = "SIN">Sinus</option>
                <option value = "COS">Cosinus</option>
            </select>
            <checkbox name="clamp">Clamp Output</checkbox>
            <group>
                <dynamicValue port="input" name="valueA" type="fluid" max = "999" step="0.1">Value A</dynamicValue>
                <dynamicValue port="input" name="valueB" type="fluid" max = "999" step="0.1">Value B</dynamicValue>
            </group>
        </module>
        <module name = "CrossProduct" title = "Cross Product" keywords = "math" class="GenericMethodNode">
            <value port="output" name="outputValue" type="vec3">Output Value</value>
            <value port="input" name="vec1" type="vec3">Vec 1</value>
            <value port="input" name="vec2" type="vec3">Vec 2</value>
            <shader-body>
                <![CDATA[
                    return cross(vec1, vec2);
                ]]>
            </shader-body>
        </module>
        <module name = "NormalizeNode" title = "Normalize Vector" keywords = "math" class="GenericMethodNode">
            <value port="output" name="outputValue" type="vec4">Output Value</value>
            <value port="input" name="var" type="vec4">Normalized Input</value>
            <shader-body>
                <![CDATA[
                    return normalize(var);
                ]]>
            </shader-body>
        </module>
        <module name = "NormalizedSin" title = "Normalized Sinus" keywords = "math" class="GenericMethodNode">
            <value port="output" name="outputValue" type="vec4">Output Value</value>
            <value port="input" name="var" type="vec4">Normalized Input</value>
            <dynamicValue port="input" name="speed" type="float" default="1" step="0.01">Speed</dynamicValue>
            <shader-body>
                <![CDATA[
                    return ((sin(var * 3.14159 * speed) + 1.0) / 2.0);
                ]]>
            </shader-body>
        </module>
        <module name = "NormalizedCos" title = "Normalized Cosinus" keywords = "math" class="GenericMethodNode">
            <value port="output" name="outputValue" type="vec4">Output Value</value>
            <value port="input" name="var" type="vec4">Normalized Input</value>
            <dynamicValue port="input" name="speed" type="float" default="1" step="0.01">Speed</dynamicValue>
            <shader-body>
                <![CDATA[
                    return ((cos(var * 3.14159 * speed) + 1.0) / 2.0);
                ]]>
            </shader-body>
        </module>
        <module name = "LerpNode" title = "Lerp" keywords = "lerp" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec4">Output Value</value>
                <value port="input" name="A" type="vec4">A</value>
                <value port="input" name="B" type="vec4">B</value>
                <dynamicValue port="input" name="T" type="float" default="0.5" step="0.01" max="1">T</dynamicValue>
            </group>
            <shader-body>
                <![CDATA[
                    return mix(A, B, T);
                ]]>
            </shader-body>
        </module>
        <module name = "InverseNode" title = "One Minus" keywords = "math">
            <value port="output" name="outputValue" type="fluid">Output Value</value>
            <value port="input" name="inputValue" type="fluid">Input Value</value>
        </module>
        <module name = "StepNode" title = "Step Node" keywords = "math">
            <group>
                <value port="output" name="outputValue" type="fluid">Output Value</value>
                <value port="input" name="inputValue" type="fluid">Input Value</value>
            </group>
            <dynamicValue port="input" name="edge" type="float" max = "1" step="0.001" default="0.5" progress="true">Edge</dynamicValue>
        </module>
        <module name = "SmoothStepNode" title = "Smooth Step Node" keywords = "math">
            <group>
                <value port="output" name="outputValue" type="fluid">Output Value</value>
                <value port="input" name="inputValue" type="fluid">Input Value</value>
            </group>
            <group>
                <dynamicValue port="input" name="edgeOne" type="float" max = "1" step="0.001" default="0.5" progress="true">Edge One</dynamicValue>
                <dynamicValue port="input" name="edgeTwo" type="float" max = "1" step="0.001" default="0.5" progress="true">Edge Two</dynamicValue>
            </group>
        </module>
        <module name = "SphereMaskNode" title = "Sphere Mask" keywords = "shape" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="float">Output Value</value>
                <value port="input" name="uv" type="vec2">UV</value>
                <value port="input" name="center" type="vec2" default="vec2(0.5, 0.5)">Center</value>
            </group>
            <group>
                <dynamicValue port="input" name="radius" type="float" default="0.0" max="1" progress="true">Radius</dynamicValue>
                <dynamicValue port="input" name="hardness" type="float" default="0.5" max="0.999" progress="true">Hardness</dynamicValue>
            </group>
            <shader-body>
                <![CDATA[
                    return 1.0 - clamp((distance(uv, center) - radius) / (1.0 - hardness), 0.0, 1.0);
                ]]>
            </shader-body>
        </module>
    </category>
    <category name="procedural" title="Procedural">
        <module name = "VoronoiNode" title = "Voronoi Noise" keywords = "math,noise,voronoi">
            <value port="output" name="outputValue" type="float">Output Value</value>
            <value port="input" name="uv" type="vec2">UV</value>
            <group>
                <dynamicValue port="input" name="angleOffset" type="float" max = "10" step="0.1" default="4">Angle Offset</dynamicValue>
                <dynamicValue port="input" name="cellDensity" type="float" max = "10" step="0.1" default="3">Cell Density</dynamicValue>
            </group>
        </module>
        <module name = "GradientNoiseNode" title = "Gradient Noise" keywords = "math,noise" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="float">Output Value</value>
                <value port="input" name="uv" type="vec2">UV</value>
            </group>
            <dynamicValue port="input" name="scale" type="float" max = "10" step="0.01" default="5">Scale</dynamicValue>
            <shader-body>
                <![CDATA[
                    return gradientNoiseCalc(uv * scale) + 0.5;
                ]]>
            </shader-body>
            <method name="gradientNoiseDir" declaration="vec2 gradientNoiseDir(vec2 p)">
                <![CDATA[
                    p = mod(p, 289.0);
                    float x = mod(((34.0 * p.x + 1.0) * p.x),289.0) + p.y;
                    x = mod(((34.0 * x + 1.0) * x), 289.0);
                    x = fract(x / 41.0) * 2.0 - 1.0;
                    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));
                ]]>
            </method>
            <method name="gradientNoiseCalc" declaration="float gradientNoiseCalc(vec2 p)">
                <![CDATA[
                    vec2 ip = floor(p);
                    vec2 fp = fract(p);
                    float d00 = dot(gradientNoiseDir(ip), fp);
                    float d01 = dot(gradientNoiseDir(ip + vec2(0.0, 1.0)), fp - vec2(0.0, 1.0));
                    float d10 = dot(gradientNoiseDir(ip + vec2(1.0, 0.0)), fp - vec2(1.0, 0.0));
                    float d11 = dot(gradientNoiseDir(ip + vec2(1.0, 1.0)), fp - vec2(1.0, 1.0));
                    fp = fp * fp * fp * (fp * (fp * 6.0 - 15.0) + 10.0);
                    return mix(mix(d00, d01, fp.y), mix(d10, d11, fp.y), fp.x);
                ]]>
            </method>
        </module>
        <module name = "RoundedRectangleNode" title = "Rounded Rectangle" keywords = "shape" class="GenericMethodNode">
            <value port="output" name="outputValue" type="float">Output Value</value>
            <value port="input" name="uv" type="vec2">UV</value>
            <group>
                <dynamicValue port="input" name="width" type="float" default="0.5">Width</dynamicValue>
                <dynamicValue port="input" name="height" type="float" default="0.5">Height</dynamicValue>
                <dynamicValue port="input" name="radius" type="float" default="0.1">Radius</dynamicValue>
            </group>
            <shader-body>
                <![CDATA[
                    radius = max(min(min(abs(radius * 2.0), abs(width)), abs(height)), 0.0001);
                    vec2 uv2 = abs(uv * 2.0 - 1.0) - vec2(width, height) + radius;
                    float d = length(max(vec2(0.0), uv2)) / radius;
                    return clamp((1.0 - d) / fwidth(d), 0.0, 1.0);
                ]]>
            </shader-body>
        </module>
        <module name = "CheckerboardNode" title = "Checkerboard" keywords = "shape" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec3">Output Value</value>
                <value port="input" name="uv" type="vec2">UV</value>
                <value port="input" name="colorA" type="vec3" default="vec3(1.0)">Color A</value>
                <value port="input" name="colorB" type="vec3" default="vec3(0.0)">Color B</value>
                <value port="input" name="frequency" type="vec2" default="vec2(1.0)">Frequency</value>
            </group>
            <shader-body>
                <![CDATA[
                    uv = (uv.xy + 0.5) * frequency;
                    vec4 derivatives = vec4(dFdx(uv), dFdy(uv));
                    vec2 duv_length = sqrt(vec2(dot(derivatives.xz, derivatives.xz), dot(derivatives.yw, derivatives.yw)));
                    float width = 1.0;
                    vec2 distance3 = 4.0 * abs(fract(uv + 0.25) - 0.5) - width;
                    vec2 scale = 0.35 / duv_length.xy;
                    float freqLimiter = sqrt(clamp(1.1 - max(duv_length.x, duv_length.y), 0.0, 1.0));
                    vec2 vector_alpha = clamp(distance3 * scale.xy, -1.0, 1.0);
                    float alpha = clamp(0.5 + 0.5 * vector_alpha.x * vector_alpha.y * freqLimiter, 0.0, 1.0);
                    return mix(colorA, colorB, vec3(alpha));
                ]]>
            </shader-body>
        </module>
    </category>
    <category name="utility" title="Utility">
        <module name = "VectorToXYNode" title = "Vector Split" keywords = "vector2,position">
            <value port="input" name="inputValue" type="vec2">Vector2</value>
            <group>
                <dynamicValue port="output" name="X" type="float" min="-1000" max="1000">X: </dynamicValue>
                <dynamicValue port="output" name="Y" type="float" min="-1000" max="1000">Y: </dynamicValue>
            </group>
        </module>
        <module name = "PremultiplyAlpha" title = "Alpha Pre-Multiply" keywords = "utility" class="GenericMethodNode" previewTransparency="true">
            <group>
                <value port="output" name="outputValue" type="vec4">Output Color</value>
                <value port="input" name="inputColor" type="vec4">Input Color</value>
                <dynamicValue port="input" name="power" type="float" default="1.0" min="1" max="100" step="0.1" progress="true">Alpha Pow</dynamicValue>
            </group>
            <shader-body>
                <![CDATA[
                     vec4 result = inputColor;
                     result.rgb *= inputColor.a;
                     result.a = pow(inputColor.a, power);

                     return result;
                ]]>
            </shader-body>
        </module>
        <module name = "FloatUniform" title = "Float Uniform" keywords = "uniform" class="UniformNode">
            <dynamicValue port="input" name="val" type="float" min="0" max="1" progress="true">Val: </dynamicValue>
            <value port="output" name="out" type="float">out</value>
        </module>
    </category>
    <category name="uv" title="UV">
        <module name = "RadialShearNode" title = "Radial Shear" keywords = "math" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec2">Output Value</value>
                <value port="input" name="uv" type="vec2">UV</value>
                <value port="input" name="center" type="vec2" default="0.5">Center</value>
                <value port="input" name="offset" type="vec2">Offset</value>
            </group>
            <dynamicValue port="input" name="strength" type="float" default="5">Strength</dynamicValue>
            <shader-body>
                <![CDATA[
                    vec2 delta = uv - center;
                    float delta2 = dot(delta.xy, delta.xy);
                    vec2 delta_offset = vec2(delta2 * strength);
                    return uv + vec2(delta.y, -delta.x) * delta_offset + offset;
                ]]>
            </shader-body>
        </module>
        <module name = "TwirlNode" title = "Twirl" keywords = "math" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec2">Output Value</value>
                <value port="input" name="uv" type="vec2">UV</value>
                <value port="input" name="center" type="vec2" default="0.5">Center</value>
                <value port="input" name="offset" type="vec2">Offset</value>
            </group>
            <dynamicValue port="input" name="strength" type="float" default="10">Strength</dynamicValue>
            <shader-body>
                <![CDATA[
                    vec2 delta = uv - center;
                    float angle = strength * length(delta);
                    float x = cos(angle) * delta.x - sin(angle) * delta.y;
                    float y = sin(angle) * delta.x + cos(angle) * delta.y;
                    return vec2(x + center.x + offset.x, y + center.y + offset.y);
                ]]>
            </shader-body>
        </module>
        <module name = "RotateNode" title = "Rotate" keywords = "math" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec2">Output Value</value>
                <value port="input" name="uv" type="vec2">UV</value>
                <value port="input" name="center" type="vec2" default="0.5">Center</value>
            </group>
            <dynamicValue port="input" name="rotation" type="float" max="3.14159" step="0.001" progress="true">Rotation</dynamicValue>
            <shader-body>
                <![CDATA[
                    uv -= center;
                    float s = sin(rotation);
                    float c = cos(rotation);
                    mat2 rMatrix = mat2(c, -s, s, c);
                    rMatrix *= 0.5;
                    rMatrix += 0.5;
                    rMatrix = rMatrix * 2.0 - 1.0;
                    uv.xy = uv.xy * rMatrix;
                    uv += center;
                    return uv;
                ]]>
            </shader-body>
        </module>
        <module name = "TilingAndOffset" title = "Tiling and Offset" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec2">Output Value</value>
                <value port="input" name="uv" type="vec2">UV</value>
                <value port="input" name="tiling" type="vec2" default="vec2(2)">Tiling</value>
                <value port="input" name="offset" type="vec2" default="0.0">Offset</value>
            </group>
            <shader-body>
                <![CDATA[
                    return fract(uv * tiling + offset);
                ]]>
            </shader-body>
        </module>
        <module name = "PosterizeNode" title = "Posterize" keywords = "math" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec4">Output</value>
                <value port="input" name="inValue" type="vec4">In</value>
                <value port="input" name="steps" type="vec4" default="4">Steps</value>
            </group>
            <shader-body>
                <![CDATA[
                    return floor(inValue / (1.0 / steps)) * (1.0 / steps);
                ]]>
            </shader-body>
        </module>
        <module name = "ClampNode" title = "Clamp" keywords = "math" class="GenericMethodNode">
            <group>
                <value port="output" name="outputValue" type="vec4">Output</value>
                <value port="input" name="inValue" type="vec4">In</value>
            </group>
            <group>
                <dynamicValue port="input" name="min" type="float" max="1" step="0.001" progress="true">Min</dynamicValue>
                <dynamicValue port="input" name="max" type="float" max="1" step="0.001" progress="true" default="1">Max</dynamicValue>
            </group>
            <shader-body>
                <![CDATA[
                    return clamp(inValue, min, max);
                ]]>
            </shader-body>
        </module>
    </category>
</modules>